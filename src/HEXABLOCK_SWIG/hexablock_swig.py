# Copyright (C) 2013-2019  CEA/DEN, EDF R&D
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
#
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hexablock_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hexablock_swig')
    _hexablock_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hexablock_swig', [dirname(__file__)])
        except ImportError:
            import _hexablock_swig
            return _hexablock_swig
        try:
            _mod = imp.load_module('_hexablock_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hexablock_swig = swig_import_helper()
    del swig_import_helper
else:
    import _hexablock_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hexablock_swig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _hexablock_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hexablock_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hexablock_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hexablock_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hexablock_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hexablock_swig.SwigPyIterator_copy(self)

    def next(self):
        return _hexablock_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _hexablock_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _hexablock_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hexablock_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hexablock_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hexablock_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hexablock_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hexablock_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hexablock_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hexablock_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _hexablock_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorHexas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorHexas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorHexas, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hexablock_swig.VectorHexas_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hexablock_swig.VectorHexas___nonzero__(self)

    def __bool__(self):
        return _hexablock_swig.VectorHexas___bool__(self)

    def __len__(self):
        return _hexablock_swig.VectorHexas___len__(self)

    def __getslice__(self, i, j):
        return _hexablock_swig.VectorHexas___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hexablock_swig.VectorHexas___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hexablock_swig.VectorHexas___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hexablock_swig.VectorHexas___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hexablock_swig.VectorHexas___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hexablock_swig.VectorHexas___setitem__(self, *args)

    def pop(self):
        return _hexablock_swig.VectorHexas_pop(self)

    def append(self, x):
        return _hexablock_swig.VectorHexas_append(self, x)

    def empty(self):
        return _hexablock_swig.VectorHexas_empty(self)

    def size(self):
        return _hexablock_swig.VectorHexas_size(self)

    def swap(self, v):
        return _hexablock_swig.VectorHexas_swap(self, v)

    def begin(self):
        return _hexablock_swig.VectorHexas_begin(self)

    def end(self):
        return _hexablock_swig.VectorHexas_end(self)

    def rbegin(self):
        return _hexablock_swig.VectorHexas_rbegin(self)

    def rend(self):
        return _hexablock_swig.VectorHexas_rend(self)

    def clear(self):
        return _hexablock_swig.VectorHexas_clear(self)

    def get_allocator(self):
        return _hexablock_swig.VectorHexas_get_allocator(self)

    def pop_back(self):
        return _hexablock_swig.VectorHexas_pop_back(self)

    def erase(self, *args):
        return _hexablock_swig.VectorHexas_erase(self, *args)

    def __init__(self, *args):
        this = _hexablock_swig.new_VectorHexas(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hexablock_swig.VectorHexas_push_back(self, x)

    def front(self):
        return _hexablock_swig.VectorHexas_front(self)

    def back(self):
        return _hexablock_swig.VectorHexas_back(self)

    def assign(self, n, x):
        return _hexablock_swig.VectorHexas_assign(self, n, x)

    def resize(self, *args):
        return _hexablock_swig.VectorHexas_resize(self, *args)

    def insert(self, *args):
        return _hexablock_swig.VectorHexas_insert(self, *args)

    def reserve(self, n):
        return _hexablock_swig.VectorHexas_reserve(self, n)

    def capacity(self):
        return _hexablock_swig.VectorHexas_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorHexas
    __del__ = lambda self: None
VectorHexas_swigregister = _hexablock_swig.VectorHexas_swigregister
VectorHexas_swigregister(VectorHexas)

class VectorQuads(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorQuads, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorQuads, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hexablock_swig.VectorQuads_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hexablock_swig.VectorQuads___nonzero__(self)

    def __bool__(self):
        return _hexablock_swig.VectorQuads___bool__(self)

    def __len__(self):
        return _hexablock_swig.VectorQuads___len__(self)

    def __getslice__(self, i, j):
        return _hexablock_swig.VectorQuads___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hexablock_swig.VectorQuads___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hexablock_swig.VectorQuads___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hexablock_swig.VectorQuads___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hexablock_swig.VectorQuads___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hexablock_swig.VectorQuads___setitem__(self, *args)

    def pop(self):
        return _hexablock_swig.VectorQuads_pop(self)

    def append(self, x):
        return _hexablock_swig.VectorQuads_append(self, x)

    def empty(self):
        return _hexablock_swig.VectorQuads_empty(self)

    def size(self):
        return _hexablock_swig.VectorQuads_size(self)

    def swap(self, v):
        return _hexablock_swig.VectorQuads_swap(self, v)

    def begin(self):
        return _hexablock_swig.VectorQuads_begin(self)

    def end(self):
        return _hexablock_swig.VectorQuads_end(self)

    def rbegin(self):
        return _hexablock_swig.VectorQuads_rbegin(self)

    def rend(self):
        return _hexablock_swig.VectorQuads_rend(self)

    def clear(self):
        return _hexablock_swig.VectorQuads_clear(self)

    def get_allocator(self):
        return _hexablock_swig.VectorQuads_get_allocator(self)

    def pop_back(self):
        return _hexablock_swig.VectorQuads_pop_back(self)

    def erase(self, *args):
        return _hexablock_swig.VectorQuads_erase(self, *args)

    def __init__(self, *args):
        this = _hexablock_swig.new_VectorQuads(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hexablock_swig.VectorQuads_push_back(self, x)

    def front(self):
        return _hexablock_swig.VectorQuads_front(self)

    def back(self):
        return _hexablock_swig.VectorQuads_back(self)

    def assign(self, n, x):
        return _hexablock_swig.VectorQuads_assign(self, n, x)

    def resize(self, *args):
        return _hexablock_swig.VectorQuads_resize(self, *args)

    def insert(self, *args):
        return _hexablock_swig.VectorQuads_insert(self, *args)

    def reserve(self, n):
        return _hexablock_swig.VectorQuads_reserve(self, n)

    def capacity(self):
        return _hexablock_swig.VectorQuads_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorQuads
    __del__ = lambda self: None
VectorQuads_swigregister = _hexablock_swig.VectorQuads_swigregister
VectorQuads_swigregister(VectorQuads)

class VectorEdges(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorEdges, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorEdges, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hexablock_swig.VectorEdges_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hexablock_swig.VectorEdges___nonzero__(self)

    def __bool__(self):
        return _hexablock_swig.VectorEdges___bool__(self)

    def __len__(self):
        return _hexablock_swig.VectorEdges___len__(self)

    def __getslice__(self, i, j):
        return _hexablock_swig.VectorEdges___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hexablock_swig.VectorEdges___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hexablock_swig.VectorEdges___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hexablock_swig.VectorEdges___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hexablock_swig.VectorEdges___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hexablock_swig.VectorEdges___setitem__(self, *args)

    def pop(self):
        return _hexablock_swig.VectorEdges_pop(self)

    def append(self, x):
        return _hexablock_swig.VectorEdges_append(self, x)

    def empty(self):
        return _hexablock_swig.VectorEdges_empty(self)

    def size(self):
        return _hexablock_swig.VectorEdges_size(self)

    def swap(self, v):
        return _hexablock_swig.VectorEdges_swap(self, v)

    def begin(self):
        return _hexablock_swig.VectorEdges_begin(self)

    def end(self):
        return _hexablock_swig.VectorEdges_end(self)

    def rbegin(self):
        return _hexablock_swig.VectorEdges_rbegin(self)

    def rend(self):
        return _hexablock_swig.VectorEdges_rend(self)

    def clear(self):
        return _hexablock_swig.VectorEdges_clear(self)

    def get_allocator(self):
        return _hexablock_swig.VectorEdges_get_allocator(self)

    def pop_back(self):
        return _hexablock_swig.VectorEdges_pop_back(self)

    def erase(self, *args):
        return _hexablock_swig.VectorEdges_erase(self, *args)

    def __init__(self, *args):
        this = _hexablock_swig.new_VectorEdges(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hexablock_swig.VectorEdges_push_back(self, x)

    def front(self):
        return _hexablock_swig.VectorEdges_front(self)

    def back(self):
        return _hexablock_swig.VectorEdges_back(self)

    def assign(self, n, x):
        return _hexablock_swig.VectorEdges_assign(self, n, x)

    def resize(self, *args):
        return _hexablock_swig.VectorEdges_resize(self, *args)

    def insert(self, *args):
        return _hexablock_swig.VectorEdges_insert(self, *args)

    def reserve(self, n):
        return _hexablock_swig.VectorEdges_reserve(self, n)

    def capacity(self):
        return _hexablock_swig.VectorEdges_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorEdges
    __del__ = lambda self: None
VectorEdges_swigregister = _hexablock_swig.VectorEdges_swigregister
VectorEdges_swigregister(VectorEdges)

class VectorVertices(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorVertices, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorVertices, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hexablock_swig.VectorVertices_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hexablock_swig.VectorVertices___nonzero__(self)

    def __bool__(self):
        return _hexablock_swig.VectorVertices___bool__(self)

    def __len__(self):
        return _hexablock_swig.VectorVertices___len__(self)

    def __getslice__(self, i, j):
        return _hexablock_swig.VectorVertices___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hexablock_swig.VectorVertices___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hexablock_swig.VectorVertices___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hexablock_swig.VectorVertices___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hexablock_swig.VectorVertices___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hexablock_swig.VectorVertices___setitem__(self, *args)

    def pop(self):
        return _hexablock_swig.VectorVertices_pop(self)

    def append(self, x):
        return _hexablock_swig.VectorVertices_append(self, x)

    def empty(self):
        return _hexablock_swig.VectorVertices_empty(self)

    def size(self):
        return _hexablock_swig.VectorVertices_size(self)

    def swap(self, v):
        return _hexablock_swig.VectorVertices_swap(self, v)

    def begin(self):
        return _hexablock_swig.VectorVertices_begin(self)

    def end(self):
        return _hexablock_swig.VectorVertices_end(self)

    def rbegin(self):
        return _hexablock_swig.VectorVertices_rbegin(self)

    def rend(self):
        return _hexablock_swig.VectorVertices_rend(self)

    def clear(self):
        return _hexablock_swig.VectorVertices_clear(self)

    def get_allocator(self):
        return _hexablock_swig.VectorVertices_get_allocator(self)

    def pop_back(self):
        return _hexablock_swig.VectorVertices_pop_back(self)

    def erase(self, *args):
        return _hexablock_swig.VectorVertices_erase(self, *args)

    def __init__(self, *args):
        this = _hexablock_swig.new_VectorVertices(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hexablock_swig.VectorVertices_push_back(self, x)

    def front(self):
        return _hexablock_swig.VectorVertices_front(self)

    def back(self):
        return _hexablock_swig.VectorVertices_back(self)

    def assign(self, n, x):
        return _hexablock_swig.VectorVertices_assign(self, n, x)

    def resize(self, *args):
        return _hexablock_swig.VectorVertices_resize(self, *args)

    def insert(self, *args):
        return _hexablock_swig.VectorVertices_insert(self, *args)

    def reserve(self, n):
        return _hexablock_swig.VectorVertices_reserve(self, n)

    def capacity(self):
        return _hexablock_swig.VectorVertices_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorVertices
    __del__ = lambda self: None
VectorVertices_swigregister = _hexablock_swig.VectorVertices_swigregister
VectorVertices_swigregister(VectorVertices)

class VectorShapes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorShapes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorShapes, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hexablock_swig.VectorShapes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hexablock_swig.VectorShapes___nonzero__(self)

    def __bool__(self):
        return _hexablock_swig.VectorShapes___bool__(self)

    def __len__(self):
        return _hexablock_swig.VectorShapes___len__(self)

    def __getslice__(self, i, j):
        return _hexablock_swig.VectorShapes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hexablock_swig.VectorShapes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hexablock_swig.VectorShapes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hexablock_swig.VectorShapes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hexablock_swig.VectorShapes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hexablock_swig.VectorShapes___setitem__(self, *args)

    def pop(self):
        return _hexablock_swig.VectorShapes_pop(self)

    def append(self, x):
        return _hexablock_swig.VectorShapes_append(self, x)

    def empty(self):
        return _hexablock_swig.VectorShapes_empty(self)

    def size(self):
        return _hexablock_swig.VectorShapes_size(self)

    def swap(self, v):
        return _hexablock_swig.VectorShapes_swap(self, v)

    def begin(self):
        return _hexablock_swig.VectorShapes_begin(self)

    def end(self):
        return _hexablock_swig.VectorShapes_end(self)

    def rbegin(self):
        return _hexablock_swig.VectorShapes_rbegin(self)

    def rend(self):
        return _hexablock_swig.VectorShapes_rend(self)

    def clear(self):
        return _hexablock_swig.VectorShapes_clear(self)

    def get_allocator(self):
        return _hexablock_swig.VectorShapes_get_allocator(self)

    def pop_back(self):
        return _hexablock_swig.VectorShapes_pop_back(self)

    def erase(self, *args):
        return _hexablock_swig.VectorShapes_erase(self, *args)

    def __init__(self, *args):
        this = _hexablock_swig.new_VectorShapes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hexablock_swig.VectorShapes_push_back(self, x)

    def front(self):
        return _hexablock_swig.VectorShapes_front(self)

    def back(self):
        return _hexablock_swig.VectorShapes_back(self)

    def assign(self, n, x):
        return _hexablock_swig.VectorShapes_assign(self, n, x)

    def resize(self, *args):
        return _hexablock_swig.VectorShapes_resize(self, *args)

    def insert(self, *args):
        return _hexablock_swig.VectorShapes_insert(self, *args)

    def reserve(self, n):
        return _hexablock_swig.VectorShapes_reserve(self, n)

    def capacity(self):
        return _hexablock_swig.VectorShapes_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorShapes
    __del__ = lambda self: None
VectorShapes_swigregister = _hexablock_swig.VectorShapes_swigregister
VectorShapes_swigregister(VectorShapes)

class VectorReal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorReal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorReal, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hexablock_swig.VectorReal_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hexablock_swig.VectorReal___nonzero__(self)

    def __bool__(self):
        return _hexablock_swig.VectorReal___bool__(self)

    def __len__(self):
        return _hexablock_swig.VectorReal___len__(self)

    def __getslice__(self, i, j):
        return _hexablock_swig.VectorReal___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hexablock_swig.VectorReal___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hexablock_swig.VectorReal___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hexablock_swig.VectorReal___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hexablock_swig.VectorReal___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hexablock_swig.VectorReal___setitem__(self, *args)

    def pop(self):
        return _hexablock_swig.VectorReal_pop(self)

    def append(self, x):
        return _hexablock_swig.VectorReal_append(self, x)

    def empty(self):
        return _hexablock_swig.VectorReal_empty(self)

    def size(self):
        return _hexablock_swig.VectorReal_size(self)

    def swap(self, v):
        return _hexablock_swig.VectorReal_swap(self, v)

    def begin(self):
        return _hexablock_swig.VectorReal_begin(self)

    def end(self):
        return _hexablock_swig.VectorReal_end(self)

    def rbegin(self):
        return _hexablock_swig.VectorReal_rbegin(self)

    def rend(self):
        return _hexablock_swig.VectorReal_rend(self)

    def clear(self):
        return _hexablock_swig.VectorReal_clear(self)

    def get_allocator(self):
        return _hexablock_swig.VectorReal_get_allocator(self)

    def pop_back(self):
        return _hexablock_swig.VectorReal_pop_back(self)

    def erase(self, *args):
        return _hexablock_swig.VectorReal_erase(self, *args)

    def __init__(self, *args):
        this = _hexablock_swig.new_VectorReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hexablock_swig.VectorReal_push_back(self, x)

    def front(self):
        return _hexablock_swig.VectorReal_front(self)

    def back(self):
        return _hexablock_swig.VectorReal_back(self)

    def assign(self, n, x):
        return _hexablock_swig.VectorReal_assign(self, n, x)

    def resize(self, *args):
        return _hexablock_swig.VectorReal_resize(self, *args)

    def insert(self, *args):
        return _hexablock_swig.VectorReal_insert(self, *args)

    def reserve(self, n):
        return _hexablock_swig.VectorReal_reserve(self, n)

    def capacity(self):
        return _hexablock_swig.VectorReal_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorReal
    __del__ = lambda self: None
VectorReal_swigregister = _hexablock_swig.VectorReal_swigregister
VectorReal_swigregister(VectorReal)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _hexablock_swig.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hexablock_swig.VectorInt___nonzero__(self)

    def __bool__(self):
        return _hexablock_swig.VectorInt___bool__(self)

    def __len__(self):
        return _hexablock_swig.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _hexablock_swig.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hexablock_swig.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hexablock_swig.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hexablock_swig.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hexablock_swig.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hexablock_swig.VectorInt___setitem__(self, *args)

    def pop(self):
        return _hexablock_swig.VectorInt_pop(self)

    def append(self, x):
        return _hexablock_swig.VectorInt_append(self, x)

    def empty(self):
        return _hexablock_swig.VectorInt_empty(self)

    def size(self):
        return _hexablock_swig.VectorInt_size(self)

    def swap(self, v):
        return _hexablock_swig.VectorInt_swap(self, v)

    def begin(self):
        return _hexablock_swig.VectorInt_begin(self)

    def end(self):
        return _hexablock_swig.VectorInt_end(self)

    def rbegin(self):
        return _hexablock_swig.VectorInt_rbegin(self)

    def rend(self):
        return _hexablock_swig.VectorInt_rend(self)

    def clear(self):
        return _hexablock_swig.VectorInt_clear(self)

    def get_allocator(self):
        return _hexablock_swig.VectorInt_get_allocator(self)

    def pop_back(self):
        return _hexablock_swig.VectorInt_pop_back(self)

    def erase(self, *args):
        return _hexablock_swig.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _hexablock_swig.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _hexablock_swig.VectorInt_push_back(self, x)

    def front(self):
        return _hexablock_swig.VectorInt_front(self)

    def back(self):
        return _hexablock_swig.VectorInt_back(self)

    def assign(self, n, x):
        return _hexablock_swig.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _hexablock_swig.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _hexablock_swig.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _hexablock_swig.VectorInt_reserve(self, n)

    def capacity(self):
        return _hexablock_swig.VectorInt_capacity(self)
    __swig_destroy__ = _hexablock_swig.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _hexablock_swig.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

DumpActif = _hexablock_swig.DumpActif
HOK = _hexablock_swig.HOK
HERR = _hexablock_swig.HERR
NOTHING = _hexablock_swig.NOTHING
EOL = _hexablock_swig.EOL
EOS = _hexablock_swig.EOS
CHVIDE = _hexablock_swig.CHVIDE
ZEROR = _hexablock_swig.ZEROR
UNR = _hexablock_swig.UNR
DEMI = _hexablock_swig.DEMI
DIM2 = _hexablock_swig.DIM2
M_PI = _hexablock_swig.M_PI
Degre2Radian = _hexablock_swig.Degre2Radian
dir_x = _hexablock_swig.dir_x
dir_y = _hexablock_swig.dir_y
dir_z = _hexablock_swig.dir_z
DIM3 = _hexablock_swig.DIM3
EL_NONE = _hexablock_swig.EL_NONE
EL_VERTEX = _hexablock_swig.EL_VERTEX
EL_EDGE = _hexablock_swig.EL_EDGE
EL_QUAD = _hexablock_swig.EL_QUAD
EL_HEXA = _hexablock_swig.EL_HEXA
EL_VECTOR = _hexablock_swig.EL_VECTOR
EL_GRID = _hexablock_swig.EL_GRID
EL_CYLINDER = _hexablock_swig.EL_CYLINDER
EL_PIPE = _hexablock_swig.EL_PIPE
EL_GROUP = _hexablock_swig.EL_GROUP
EL_LAW = _hexablock_swig.EL_LAW
EL_SHAPE = _hexablock_swig.EL_SHAPE
EL_SUBSHAPE = _hexablock_swig.EL_SUBSHAPE
EL_PROPAGATION = _hexablock_swig.EL_PROPAGATION
EL_DOCU = _hexablock_swig.EL_DOCU
EL_REMOVED = _hexablock_swig.EL_REMOVED
EL_MAXI = _hexablock_swig.EL_MAXI
HexaCell = _hexablock_swig.HexaCell
QuadCell = _hexablock_swig.QuadCell
EdgeCell = _hexablock_swig.EdgeCell
HexaNode = _hexablock_swig.HexaNode
QuadNode = _hexablock_swig.QuadNode
EdgeNode = _hexablock_swig.EdgeNode
VertexNode = _hexablock_swig.VertexNode
SH_NONE = _hexablock_swig.SH_NONE
SH_IMPORT = _hexablock_swig.SH_IMPORT
SH_CYLINDER = _hexablock_swig.SH_CYLINDER
SH_INTER = _hexablock_swig.SH_INTER
SH_SPHERE = _hexablock_swig.SH_SPHERE
SH_CLOUD = _hexablock_swig.SH_CLOUD
SH_EXTRUD = _hexablock_swig.SH_EXTRUD
CYL_NOFILL = _hexablock_swig.CYL_NOFILL
CYL_CL4 = _hexablock_swig.CYL_CL4
CYL_CL6 = _hexablock_swig.CYL_CL6
CYL_CLOSED = _hexablock_swig.CYL_CLOSED
CYL_PEER = _hexablock_swig.CYL_PEER
CYL_ODD = _hexablock_swig.CYL_ODD
GR_NONE = _hexablock_swig.GR_NONE
GR_CARTESIAN = _hexablock_swig.GR_CARTESIAN
GR_CYLINDRIC = _hexablock_swig.GR_CYLINDRIC
GR_SPHERIC = _hexablock_swig.GR_SPHERIC
GR_JOINT = _hexablock_swig.GR_JOINT
GR_BICYL = _hexablock_swig.GR_BICYL
GR_BIPIPE = _hexablock_swig.GR_BIPIPE
GR_REPLACE = _hexablock_swig.GR_REPLACE
GR_HEMISPHERIC = _hexablock_swig.GR_HEMISPHERIC
GR_RIND = _hexablock_swig.GR_RIND
GR_PART_SPHERIC = _hexablock_swig.GR_PART_SPHERIC
GR_PART_RIND = _hexablock_swig.GR_PART_RIND
S_E = _hexablock_swig.S_E
S_NE = _hexablock_swig.S_NE
S_N = _hexablock_swig.S_N
S_NW = _hexablock_swig.S_NW
S_W = _hexablock_swig.S_W
S_SW = _hexablock_swig.S_SW
S_S = _hexablock_swig.S_S
S_SE = _hexablock_swig.S_SE
S_MAXI = _hexablock_swig.S_MAXI
Uniform = _hexablock_swig.Uniform
Arithmetic = _hexablock_swig.Arithmetic
Geometric = _hexablock_swig.Geometric
OR_FRONT = _hexablock_swig.OR_FRONT
OR_LEFT = _hexablock_swig.OR_LEFT
OR_RIGHT = _hexablock_swig.OR_RIGHT
OR_BACK = _hexablock_swig.OR_BACK
IS_NONE = _hexablock_swig.IS_NONE
IS_MARRIED = _hexablock_swig.IS_MARRIED
NO_COUNTED = _hexablock_swig.NO_COUNTED
NO_USED = _hexablock_swig.NO_USED
IS_USED = _hexablock_swig.IS_USED
V_AMONT = _hexablock_swig.V_AMONT
V_AVAL = _hexablock_swig.V_AVAL
V_TWO = _hexablock_swig.V_TWO
E_A = _hexablock_swig.E_A
E_B = _hexablock_swig.E_B
E_C = _hexablock_swig.E_C
E_D = _hexablock_swig.E_D
QUAD4 = _hexablock_swig.QUAD4
Q_A = _hexablock_swig.Q_A
Q_B = _hexablock_swig.Q_B
Q_C = _hexablock_swig.Q_C
Q_D = _hexablock_swig.Q_D
Q_E = _hexablock_swig.Q_E
Q_F = _hexablock_swig.Q_F
HQ_MAXI = _hexablock_swig.HQ_MAXI
E_AC = _hexablock_swig.E_AC
E_AD = _hexablock_swig.E_AD
E_BC = _hexablock_swig.E_BC
E_BD = _hexablock_swig.E_BD
E_AE = _hexablock_swig.E_AE
E_AF = _hexablock_swig.E_AF
E_BE = _hexablock_swig.E_BE
E_BF = _hexablock_swig.E_BF
E_CE = _hexablock_swig.E_CE
E_CF = _hexablock_swig.E_CF
E_DE = _hexablock_swig.E_DE
E_DF = _hexablock_swig.E_DF
HE_MAXI = _hexablock_swig.HE_MAXI
V_ACE = _hexablock_swig.V_ACE
V_ACF = _hexablock_swig.V_ACF
V_ADE = _hexablock_swig.V_ADE
V_ADF = _hexablock_swig.V_ADF
V_BCE = _hexablock_swig.V_BCE
V_BCF = _hexablock_swig.V_BCF
V_BDE = _hexablock_swig.V_BDE
V_BDF = _hexablock_swig.V_BDF
HV_MAXI = _hexablock_swig.HV_MAXI
Q_INSIDE = _hexablock_swig.Q_INSIDE
Q_DIRECT = _hexablock_swig.Q_DIRECT
Q_INVERSE = _hexablock_swig.Q_INVERSE
Q_UNDEFINED = _hexablock_swig.Q_UNDEFINED
Q_WAITING = _hexablock_swig.Q_WAITING
KS_Line = _hexablock_swig.KS_Line
KS_Circle = _hexablock_swig.KS_Circle
KS_Ellipse = _hexablock_swig.KS_Ellipse
KS_Hyperbola = _hexablock_swig.KS_Hyperbola
KS_Parabola = _hexablock_swig.KS_Parabola
KS_BezierCurve = _hexablock_swig.KS_BezierCurve
KS_BSplineCurve = _hexablock_swig.KS_BSplineCurve
KS_OtherCurve = _hexablock_swig.KS_OtherCurve
KS_None = _hexablock_swig.KS_None
CylSmall = _hexablock_swig.CylSmall
CylBig = _hexablock_swig.CylBig
NxInt = _hexablock_swig.NxInt
NxExt = _hexablock_swig.NxExt

def get_temp_name(format, nomfic):
    return _hexablock_swig.get_temp_name(format, nomfic)
get_temp_name = _hexablock_swig.get_temp_name

def fatal_error(format, info1=None, info2=None):
    return _hexablock_swig.fatal_error(format, info1, info2)
fatal_error = _hexablock_swig.fatal_error

def prod_scalaire(v1, v2):
    return _hexablock_swig.prod_scalaire(v1, v2)
prod_scalaire = _hexablock_swig.prod_scalaire

def prod_vectoriel(v1, v2, v3):
    return _hexablock_swig.prod_vectoriel(v1, v2, v3)
prod_vectoriel = _hexablock_swig.prod_vectoriel

def prod_mixte(vi, vj, vk):
    return _hexablock_swig.prod_mixte(vi, vj, vk)
prod_mixte = _hexablock_swig.prod_mixte

def deg2radians(angle):
    return _hexablock_swig.deg2radians(angle)
deg2radians = _hexablock_swig.deg2radians

def rad2degres(angle):
    return _hexablock_swig.rad2degres(angle)
rad2degres = _hexablock_swig.rad2degres

def calc_norme(v1):
    return _hexablock_swig.calc_norme(v1)
calc_norme = _hexablock_swig.calc_norme

def calc_distance(v1, v2):
    return _hexablock_swig.calc_distance(v1, v2)
calc_distance = _hexablock_swig.calc_distance

def calc_d2(v1, v2):
    return _hexablock_swig.calc_d2(v1, v2)
calc_d2 = _hexablock_swig.calc_d2

def calc_vecteur(pta, ptb, vab):
    return _hexablock_swig.calc_vecteur(pta, ptb, vab)
calc_vecteur = _hexablock_swig.calc_vecteur

def copy_vecteur(va, vb):
    return _hexablock_swig.copy_vecteur(va, vb)
copy_vecteur = _hexablock_swig.copy_vecteur

def calc_milieu(pta, ptb, milieu):
    return _hexablock_swig.calc_milieu(pta, ptb, milieu)
calc_milieu = _hexablock_swig.calc_milieu

def normer_vecteur(v1):
    return _hexablock_swig.normer_vecteur(v1)
normer_vecteur = _hexablock_swig.normer_vecteur

def carre(val):
    return _hexablock_swig.carre(val)
carre = _hexablock_swig.carre

def same_coords(pa, pb, epsilon=1e-6):
    return _hexablock_swig.same_coords(pa, pb, epsilon)
same_coords = _hexablock_swig.same_coords

def requals(*args):
    return _hexablock_swig.requals(*args)
requals = _hexablock_swig.requals

def on_debug():
    return _hexablock_swig.on_debug()
on_debug = _hexablock_swig.on_debug

def in_test():
    return _hexablock_swig.in_test()
in_test = _hexablock_swig.in_test

def niv_debug():
    return _hexablock_swig.niv_debug()
niv_debug = _hexablock_swig.niv_debug

def set_minus(chaine):
    return _hexablock_swig.set_minus(chaine)
set_minus = _hexablock_swig.set_minus

def special_option():
    return _hexablock_swig.special_option()
special_option = _hexablock_swig.special_option

def set_special_option(opt):
    return _hexablock_swig.set_special_option(opt)
set_special_option = _hexablock_swig.set_special_option

def sizeof_file(filename):
    return _hexablock_swig.sizeof_file(filename)
sizeof_file = _hexablock_swig.sizeof_file

def read_file(filename, size):
    return _hexablock_swig.read_file(filename, size)
read_file = _hexablock_swig.read_file

def get_time(buffer):
    return _hexablock_swig.get_time(buffer)
get_time = _hexablock_swig.get_time

def make_basename(filename, base):
    return _hexablock_swig.make_basename(filename, base)
make_basename = _hexablock_swig.make_basename
class EltBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EltBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EltBase, name)
    __repr__ = _swig_repr

    def countHexa(self):
        return _hexablock_swig.EltBase_countHexa(self)

    def countQuad(self):
        return _hexablock_swig.EltBase_countQuad(self)

    def countEdge(self):
        return _hexablock_swig.EltBase_countEdge(self)

    def countVertex(self):
        return _hexablock_swig.EltBase_countVertex(self)

    def setError(self, kod=1):
        return _hexablock_swig.EltBase_setError(self, kod)

    def getError(self):
        return _hexablock_swig.EltBase_getError(self)

    def isValid(self):
        return _hexablock_swig.EltBase_isValid(self)

    def isBad(self):
        return _hexablock_swig.EltBase_isBad(self)

    def duplicate(self):
        return _hexablock_swig.EltBase_duplicate(self)

    def clearAssociation(self):
        return _hexablock_swig.EltBase_clearAssociation(self)

    def replaceEdge(self, old, nouveau):
        return _hexablock_swig.EltBase_replaceEdge(self, old, nouveau)

    def replaceVertex(self, old, nouveau):
        return _hexablock_swig.EltBase_replaceVertex(self, old, nouveau)

    def __init__(self, *args):
        this = _hexablock_swig.new_EltBase(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_EltBase
    __del__ = lambda self: None

    def remove(self):
        return _hexablock_swig.EltBase_remove(self)

    def suppress(self):
        return _hexablock_swig.EltBase_suppress(self)

    def dump(self):
        return _hexablock_swig.EltBase_dump(self)

    def saveXml(self, xml):
        return _hexablock_swig.EltBase_saveXml(self, xml)

    def majReferences(self):
        return _hexablock_swig.EltBase_majReferences(self)

    def makeVarName(self, nom):
        return _hexablock_swig.EltBase_makeVarName(self, nom)
    if _newclass:
        makeName = staticmethod(_hexablock_swig.EltBase_makeName)
    else:
        makeName = _hexablock_swig.EltBase_makeName

    def next(self):
        return _hexablock_swig.EltBase_next(self)

    def setNext(self, suivant):
        return _hexablock_swig.EltBase_setNext(self, suivant)

    def getId(self):
        return _hexablock_swig.EltBase_getId(self)

    def setId(self, ln):
        return _hexablock_swig.EltBase_setId(self, ln)

    def dad(self):
        return _hexablock_swig.EltBase_dad(self)

    def getType(self):
        return _hexablock_swig.EltBase_getType(self)

    def isHere(self):
        return _hexablock_swig.EltBase_isHere(self)

    def isDeleted(self):
        return _hexablock_swig.EltBase_isDeleted(self)

    def razReferences(self):
        return _hexablock_swig.EltBase_razReferences(self)

    def addParent(self, dad):
        return _hexablock_swig.EltBase_addParent(self, dad)

    def getNbrParents(self):
        return _hexablock_swig.EltBase_getNbrParents(self)

    def hasParents(self):
        return _hexablock_swig.EltBase_hasParents(self)

    def getFather(self, nro):
        return _hexablock_swig.EltBase_getFather(self, nro)

    def getMark(self):
        return _hexablock_swig.EltBase_getMark(self)

    def setMark(self, ln):
        return _hexablock_swig.EltBase_setMark(self, ln)

    def printName(self, *args):
        return _hexablock_swig.EltBase_printName(self, *args)

    def dumpRef(self):
        return _hexablock_swig.EltBase_dumpRef(self)

    def getName(self, *args):
        return _hexablock_swig.EltBase_getName(self, *args)

    def setName(self, *args):
        return _hexablock_swig.EltBase_setName(self, *args)

    def debug(self, niv=0):
        return _hexablock_swig.EltBase_debug(self, niv)

    def isAssociated(self):
        return _hexablock_swig.EltBase_isAssociated(self)

    def getNextName(self):
        return _hexablock_swig.EltBase_getNextName(self)
EltBase_swigregister = _hexablock_swig.EltBase_swigregister
EltBase_swigregister(EltBase)
cvar = _hexablock_swig.cvar
ABR_TYPES = cvar.ABR_TYPES
Epsil = cvar.Epsil
UnEpsil = cvar.UnEpsil
Epsil2 = cvar.Epsil2

def EltBase_makeName(type, id, name):
    return _hexablock_swig.EltBase_makeName(type, id, name)
EltBase_makeName = _hexablock_swig.EltBase_makeName

class Vertex(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr

    def getX(self):
        return _hexablock_swig.Vertex_getX(self)

    def getY(self):
        return _hexablock_swig.Vertex_getY(self)

    def getZ(self):
        return _hexablock_swig.Vertex_getZ(self)

    def setX(self, v):
        return _hexablock_swig.Vertex_setX(self, v)

    def setY(self, v):
        return _hexablock_swig.Vertex_setY(self, v)

    def setZ(self, v):
        return _hexablock_swig.Vertex_setZ(self, v)

    def getAssoX(self):
        return _hexablock_swig.Vertex_getAssoX(self)

    def getAssoY(self):
        return _hexablock_swig.Vertex_getAssoY(self)

    def getAssoZ(self):
        return _hexablock_swig.Vertex_getAssoZ(self)

    def setAssociation(self, geom, subid):
        return _hexablock_swig.Vertex_setAssociation(self, geom, subid)

    def clearAssociation(self):
        return _hexablock_swig.Vertex_clearAssociation(self)

    def setColor(self, valeur):
        return _hexablock_swig.Vertex_setColor(self, valeur)

    def __init__(self, prev, x, y, z):
        this = _hexablock_swig.new_Vertex(prev, x, y, z)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _hexablock_swig.Vertex_swigregister
Vertex_swigregister(Vertex)

class Edge(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr

    def getVertex(self, nro):
        return _hexablock_swig.Edge_getVertex(self, nro)

    def addAssociation(self, geom, subid, deb, fin):
        return _hexablock_swig.Edge_addAssociation(self, geom, subid, deb, fin)

    def setAssociation(self, geom, subid):
        return _hexablock_swig.Edge_setAssociation(self, geom, subid)

    def findAssociation(self, geom):
        return _hexablock_swig.Edge_findAssociation(self, geom)

    def clearAssociation(self):
        return _hexablock_swig.Edge_clearAssociation(self)

    def setColor(self, valeur):
        return _hexablock_swig.Edge_setColor(self, valeur)

    def getWay(self):
        return _hexablock_swig.Edge_getWay(self)

    def getLength(self):
        return _hexablock_swig.Edge_getLength(self)

    def __init__(self, va, vb):
        this = _hexablock_swig.new_Edge(va, vb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Edge
    __del__ = lambda self: None
Edge_swigregister = _hexablock_swig.Edge_swigregister
Edge_swigregister(Edge)

class Quad(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad, name)
    __repr__ = _swig_repr

    def getEdge(self, nro):
        return _hexablock_swig.Quad_getEdge(self, nro)

    def getVertex(self, nro):
        return _hexablock_swig.Quad_getVertex(self, nro)

    def addAssociation(self, forme, subid):
        return _hexablock_swig.Quad_addAssociation(self, forme, subid)

    def clearAssociation(self):
        return _hexablock_swig.Quad_clearAssociation(self)

    def setColor(self, valeur):
        return _hexablock_swig.Quad_setColor(self, valeur)

    def nearestVertex(self, other):
        return _hexablock_swig.Quad_nearestVertex(self, other)

    def getCenter(self, center):
        return _hexablock_swig.Quad_getCenter(self, center)

    def __init__(self, va, vb, vc, vd):
        this = _hexablock_swig.new_Quad(va, vb, vc, vd)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Quad
    __del__ = lambda self: None
Quad_swigregister = _hexablock_swig.Quad_swigregister
Quad_swigregister(Quad)

class Hexa(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hexa, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Hexa, name)
    __repr__ = _swig_repr

    def getQuad(self, nro):
        return _hexablock_swig.Hexa_getQuad(self, nro)

    def getEdge(self, nro):
        return _hexablock_swig.Hexa_getEdge(self, nro)

    def getVertex(self, nro):
        return _hexablock_swig.Hexa_getVertex(self, nro)

    def setColor(self, valeur):
        return _hexablock_swig.Hexa_setColor(self, valeur)

    def __init__(self, qa, qb, qc, qd, qe, qf):
        this = _hexablock_swig.new_Hexa(qa, qb, qc, qd, qe, qf)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Hexa
    __del__ = lambda self: None
Hexa_swigregister = _hexablock_swig.Hexa_swigregister
Hexa_swigregister(Hexa)

class Vector(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr

    def getDx(self):
        return _hexablock_swig.Vector_getDx(self)

    def getDy(self):
        return _hexablock_swig.Vector_getDy(self)

    def getDz(self):
        return _hexablock_swig.Vector_getDz(self)

    def getNorm(self):
        return _hexablock_swig.Vector_getNorm(self)

    def getAngleX(self):
        return _hexablock_swig.Vector_getAngleX(self)

    def __init__(self, doc, dx=0, dy=0, dz=0):
        this = _hexablock_swig.new_Vector(doc, dx, dy, dz)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Vector
    __del__ = lambda self: None
Vector_swigregister = _hexablock_swig.Vector_swigregister
Vector_swigregister(Vector)

class Document(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr

    def __init__(self, name, dad=None):
        this = _hexablock_swig.new_Document(name, dad)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dump(self):
        return _hexablock_swig.Document_dump(self)

    def setName(self, name):
        return _hexablock_swig.Document_setName(self, name)

    def setLevel(self, niv):
        return _hexablock_swig.Document_setLevel(self, niv)

    def save(self, ficxml):
        return _hexablock_swig.Document_save(self, ficxml)

    def saveVtk(self, nomfic):
        return _hexablock_swig.Document_saveVtk(self, nomfic)

    def purge(self):
        return _hexablock_swig.Document_purge(self)

    def setTolerance(self, tol):
        return _hexablock_swig.Document_setTolerance(self, tol)

    def getTolerance(self):
        return _hexablock_swig.Document_getTolerance(self)

    def addVertex(self, x=0.0, y=0.0, z=0.0):
        return _hexablock_swig.Document_addVertex(self, x, y, z)

    def addEdge(self, va, vb):
        return _hexablock_swig.Document_addEdge(self, va, vb)

    def addEdgeVector(self, va, vec):
        return _hexablock_swig.Document_addEdgeVector(self, va, vec)

    def addQuad(self, v1, v2, v3, v4):
        return _hexablock_swig.Document_addQuad(self, v1, v2, v3, v4)

    def addQuadVertices(self, v1, v2, v3, v4):
        return _hexablock_swig.Document_addQuadVertices(self, v1, v2, v3, v4)

    def addHexa(self, qa, qb, qc, qd, qe, qf):
        return _hexablock_swig.Document_addHexa(self, qa, qb, qc, qd, qe, qf)

    def addHexaVertices(self, v1, v2, v3, v4, v5, v6, v7, v8):
        return _hexablock_swig.Document_addHexaVertices(self, v1, v2, v3, v4, v5, v6, v7, v8)

    def addHexa2Quads(self, q1, q2):
        return _hexablock_swig.Document_addHexa2Quads(self, q1, q2)

    def addHexa3Quads(self, q1, q2, q3):
        return _hexablock_swig.Document_addHexa3Quads(self, q1, q2, q3)

    def addHexa4Quads(self, q1, q2, q3, q4):
        return _hexablock_swig.Document_addHexa4Quads(self, q1, q2, q3, q4)

    def addHexa5Quads(self, q1, q2, q3, q4, q5):
        return _hexablock_swig.Document_addHexa5Quads(self, q1, q2, q3, q4, q5)

    def addVector(self, dx=0.0, dy=0.0, dz=0.0):
        return _hexablock_swig.Document_addVector(self, dx, dy, dz)

    def addVectorVertices(self, va, vb):
        return _hexablock_swig.Document_addVectorVertices(self, va, vb)

    def addLaws(self, lgmoy, usemax=True):
        return _hexablock_swig.Document_addLaws(self, lgmoy, usemax)

    def addHexaGroup(self, name):
        return _hexablock_swig.Document_addHexaGroup(self, name)

    def addQuadGroup(self, name):
        return _hexablock_swig.Document_addQuadGroup(self, name)

    def addQuadNodeGroup(self, name):
        return _hexablock_swig.Document_addQuadNodeGroup(self, name)

    def addHexaNodeGroup(self, name):
        return _hexablock_swig.Document_addHexaNodeGroup(self, name)

    def addEdgeGroup(self, name):
        return _hexablock_swig.Document_addEdgeGroup(self, name)

    def addEdgeNodeGroup(self, name):
        return _hexablock_swig.Document_addEdgeNodeGroup(self, name)

    def addVertexNodeGroup(self, name):
        return _hexablock_swig.Document_addVertexNodeGroup(self, name)

    def makeTranslation(self, elts, trans):
        return _hexablock_swig.Document_makeTranslation(self, elts, trans)

    def makeScale(self, elts, ver, k):
        return _hexablock_swig.Document_makeScale(self, elts, ver, k)

    def makeRotation(self, elts, ver, vec, angle):
        return _hexablock_swig.Document_makeRotation(self, elts, ver, vec, angle)

    def makeSymmetryPoint(self, elts, ver):
        return _hexablock_swig.Document_makeSymmetryPoint(self, elts, ver)

    def makeSymmetryLine(self, elts, ver, vec):
        return _hexablock_swig.Document_makeSymmetryLine(self, elts, ver, vec)

    def makeSymmetryPlane(self, elts, ver, vec):
        return _hexablock_swig.Document_makeSymmetryPlane(self, elts, ver, vec)

    def performTranslation(self, elts, trans):
        return _hexablock_swig.Document_performTranslation(self, elts, trans)

    def performScale(self, elts, ver, k):
        return _hexablock_swig.Document_performScale(self, elts, ver, k)

    def performRotation(self, elts, ver, vec, angle):
        return _hexablock_swig.Document_performRotation(self, elts, ver, vec, angle)

    def performSymmetryPoint(self, elts, ver):
        return _hexablock_swig.Document_performSymmetryPoint(self, elts, ver)

    def performSymmetryLine(self, elts, ver, vec):
        return _hexablock_swig.Document_performSymmetryLine(self, elts, ver, vec)

    def performSymmetryPlane(self, elts, ver, vec):
        return _hexablock_swig.Document_performSymmetryPlane(self, elts, ver, vec)

    def disconnectQuad(self, maille, face):
        return _hexablock_swig.Document_disconnectQuad(self, maille, face)

    def disconnectEdge(self, maille, arete):
        return _hexablock_swig.Document_disconnectEdge(self, maille, arete)

    def disconnectVertex(self, maille, noeud):
        return _hexablock_swig.Document_disconnectVertex(self, maille, noeud)

    def disconnectEdges(self, thexas, edges):
        return _hexablock_swig.Document_disconnectEdges(self, thexas, edges)

    def replace(self, pattern, cible, p1, c1, p2, c2):
        return _hexablock_swig.Document_replace(self, pattern, cible, p1, c1, p2, c2)

    def mergeVertices(self, v1, v2):
        return _hexablock_swig.Document_mergeVertices(self, v1, v2)

    def mergeEdges(self, e1, e2, v1, v2):
        return _hexablock_swig.Document_mergeEdges(self, e1, e2, v1, v2)

    def mergeQuads(self, q1, q2, v1, v2, v3, v4):
        return _hexablock_swig.Document_mergeQuads(self, q1, q2, v1, v2, v3, v4)

    def clearAssociation(self):
        return _hexablock_swig.Document_clearAssociation(self)

    def associateOpenedLine(self, mline, gline, tabid, pstart, pend):
        return _hexablock_swig.Document_associateOpenedLine(self, mline, gline, tabid, pstart, pend)

    def associateClosedLine(self, mfirst, mline, gline, tabid, pstart, inv):
        return _hexablock_swig.Document_associateClosedLine(self, mfirst, mline, gline, tabid, pstart, inv)

    def countHexa(self):
        return _hexablock_swig.Document_countHexa(self)

    def countQuad(self):
        return _hexablock_swig.Document_countQuad(self)

    def countEdge(self):
        return _hexablock_swig.Document_countEdge(self)

    def countVertex(self):
        return _hexablock_swig.Document_countVertex(self)

    def countVector(self):
        return _hexablock_swig.Document_countVector(self)

    def countGroup(self):
        return _hexablock_swig.Document_countGroup(self)

    def countLaw(self):
        return _hexablock_swig.Document_countLaw(self)

    def countPropagation(self):
        return _hexablock_swig.Document_countPropagation(self)

    def countShape(self):
        return _hexablock_swig.Document_countShape(self)

    def countUsedHexa(self):
        return _hexablock_swig.Document_countUsedHexa(self)

    def countUsedQuad(self):
        return _hexablock_swig.Document_countUsedQuad(self)

    def countUsedEdge(self):
        return _hexablock_swig.Document_countUsedEdge(self)

    def countUsedVertex(self):
        return _hexablock_swig.Document_countUsedVertex(self)

    def getHexa(self, nro):
        return _hexablock_swig.Document_getHexa(self, nro)

    def getQuad(self, nro):
        return _hexablock_swig.Document_getQuad(self, nro)

    def getEdge(self, nro):
        return _hexablock_swig.Document_getEdge(self, nro)

    def getVertex(self, nro):
        return _hexablock_swig.Document_getVertex(self, nro)

    def getUsedHexa(self, nro):
        return _hexablock_swig.Document_getUsedHexa(self, nro)

    def getUsedQuad(self, nro):
        return _hexablock_swig.Document_getUsedQuad(self, nro)

    def getUsedEdge(self, nro):
        return _hexablock_swig.Document_getUsedEdge(self, nro)

    def getUsedVertex(self, nro):
        return _hexablock_swig.Document_getUsedVertex(self, nro)

    def getVector(self, nro):
        return _hexablock_swig.Document_getVector(self, nro)

    def getShape(self, nro):
        return _hexablock_swig.Document_getShape(self, nro)

    def getGroup(self, nro):
        return _hexablock_swig.Document_getGroup(self, nro)

    def getLaw(self, nro):
        return _hexablock_swig.Document_getLaw(self, nro)

    def getPropagation(self, nro):
        return _hexablock_swig.Document_getPropagation(self, nro)

    def getFirstExplicitShape(self):
        return _hexablock_swig.Document_getFirstExplicitShape(self)

    def findEdge(self, va, vb):
        return _hexablock_swig.Document_findEdge(self, va, vb)

    def findQuad(self, *args):
        return _hexablock_swig.Document_findQuad(self, *args)

    def findHexa(self, va, vb):
        return _hexablock_swig.Document_findHexa(self, va, vb)

    def findGroup(self, name):
        return _hexablock_swig.Document_findGroup(self, name)

    def findLaw(self, name):
        return _hexablock_swig.Document_findLaw(self, name)

    def findPropagation(self, arete):
        return _hexablock_swig.Document_findPropagation(self, arete)

    def removeHexa(self, maille):
        return _hexablock_swig.Document_removeHexa(self, maille)

    def removeQuad(self, maille):
        return _hexablock_swig.Document_removeQuad(self, maille)

    def removeConnectedHexa(self, maille):
        return _hexablock_swig.Document_removeConnectedHexa(self, maille)

    def removeElements(self, bloc):
        return _hexablock_swig.Document_removeElements(self, bloc)

    def removeGroup(self, grp):
        return _hexablock_swig.Document_removeGroup(self, grp)

    def removeLaw(self, lau):
        return _hexablock_swig.Document_removeLaw(self, lau)

    def makeCartesianTop(self, nx, ny, nz):
        return _hexablock_swig.Document_makeCartesianTop(self, nx, ny, nz)

    def makeCartesianUni(self, ori, vx, vy, vz, lx, ly, lz, nx, ny, nz):
        return _hexablock_swig.Document_makeCartesianUni(self, ori, vx, vy, vz, lx, ly, lz, nx, ny, nz)

    def makeCartesian(self, ori, vx, vy, vz, tlx, tly, tlz):
        return _hexablock_swig.Document_makeCartesian(self, ori, vx, vy, vz, tlx, tly, tlz)

    def makeCylinderTop(self, nr, na, nh):
        return _hexablock_swig.Document_makeCylinderTop(self, nr, na, nh)

    def makeCylinderUni(self, orig, vx, vz, rint, rext, ang, haut, nr, na, nh):
        return _hexablock_swig.Document_makeCylinderUni(self, orig, vx, vz, rint, rext, ang, haut, nr, na, nh)

    def makeCylinder(self, orig, vx, vz, tray, tang, thaut):
        return _hexablock_swig.Document_makeCylinder(self, orig, vx, vz, tray, tang, thaut)

    def makePipeTop(self, nr, na, nh):
        return _hexablock_swig.Document_makePipeTop(self, nr, na, nh)

    def makePipeUni(self, orig, vx, vz, rint, rext, angle, haut, nr, na, nh):
        return _hexablock_swig.Document_makePipeUni(self, orig, vx, vz, rint, rext, angle, haut, nr, na, nh)

    def makePipe(self, orig, vx, vz, tray, tang, thaut):
        return _hexablock_swig.Document_makePipe(self, orig, vx, vz, tray, tang, thaut)

    def makeSphericalTop(self, nbre, crit=0):
        return _hexablock_swig.Document_makeSphericalTop(self, nbre, crit)

    def makeSphericalUni(self, centre, vx, vz, rayon, nbre, crit=0):
        return _hexablock_swig.Document_makeSphericalUni(self, centre, vx, vz, rayon, nbre, crit)

    def makeSpherical(self, centre, vx, vz, rayon, crit=0):
        return _hexablock_swig.Document_makeSpherical(self, centre, vx, vz, rayon, crit)

    def makeSphereTop(self, nr, na, nh):
        return _hexablock_swig.Document_makeSphereTop(self, nr, na, nh)

    def makeSphereUni(self, centre, vx, vz, rtrou, rext, ang, vplan, nr, na, nh):
        return _hexablock_swig.Document_makeSphereUni(self, centre, vx, vz, rtrou, rext, ang, vplan, nr, na, nh)

    def makeSphere(self, centre, vx, vz, tray, tang, thaut):
        return _hexablock_swig.Document_makeSphere(self, centre, vx, vz, tray, tang, thaut)

    def makeRindTop(self, nr, na, nh):
        return _hexablock_swig.Document_makeRindTop(self, nr, na, nh)

    def makeRindUni(self, centre, vx, vz, raytrou, rint, rext, ang, vplan, nr, na, nh):
        return _hexablock_swig.Document_makeRindUni(self, centre, vx, vz, raytrou, rint, rext, ang, vplan, nr, na, nh)

    def makeRind(self, centre, vx, vz, tray, tang, thaut):
        return _hexablock_swig.Document_makeRind(self, centre, vx, vz, tray, tang, thaut)

    def makeCylinders(self, ori1, z1, r1, h1, ori2, z2, r2, h2):
        return _hexablock_swig.Document_makeCylinders(self, ori1, z1, r1, h1, ori2, z2, r2, h2)

    def makePipes(self, ori1, z1, rint1, rex1, h1, ori2, z2, rint2, rex2, h2):
        return _hexablock_swig.Document_makePipes(self, ori1, z1, rint1, rex1, h1, ori2, z2, rint2, rex2, h2)

    def extrudeQuadTop(self, start, nbre):
        return _hexablock_swig.Document_extrudeQuadTop(self, start, nbre)

    def extrudeQuadUni(self, start, dv, len, nbre):
        return _hexablock_swig.Document_extrudeQuadUni(self, start, dv, len, nbre)

    def extrudeQuad(self, start, dv, tlen):
        return _hexablock_swig.Document_extrudeQuad(self, start, dv, tlen)

    def extrudeQuadsTop(self, start, nbre):
        return _hexablock_swig.Document_extrudeQuadsTop(self, start, nbre)

    def extrudeQuadsUni(self, start, axis, len, nbre):
        return _hexablock_swig.Document_extrudeQuadsUni(self, start, axis, len, nbre)

    def extrudeQuads(self, start, axis, tlen):
        return _hexablock_swig.Document_extrudeQuads(self, start, axis, tlen)

    def revolutionQuadUni(self, start, center, axis, angle, nbre):
        return _hexablock_swig.Document_revolutionQuadUni(self, start, center, axis, angle, nbre)

    def revolutionQuad(self, start, center, axis, angles):
        return _hexablock_swig.Document_revolutionQuad(self, start, center, axis, angles)

    def revolutionQuadsUni(self, start, center, axis, angle, nbre):
        return _hexablock_swig.Document_revolutionQuadsUni(self, start, center, axis, angle, nbre)

    def revolutionQuads(self, start, center, axis, angles):
        return _hexablock_swig.Document_revolutionQuads(self, start, center, axis, angles)

    def joinQuadUni(self, start, dest, v1, v2, v3, v4, nb):
        return _hexablock_swig.Document_joinQuadUni(self, start, dest, v1, v2, v3, v4, nb)

    def joinQuadsUni(self, start, dest, v1, v2, v3, v4, nb):
        return _hexablock_swig.Document_joinQuadsUni(self, start, dest, v1, v2, v3, v4, nb)

    def joinQuad(self, start, dest, va1, vb1, va2, vb2, tlen):
        return _hexablock_swig.Document_joinQuad(self, start, dest, va1, vb1, va2, vb2, tlen)

    def joinQuads(self, start, dest, va1, vb1, va2, vb2, tlen):
        return _hexablock_swig.Document_joinQuads(self, start, dest, va1, vb1, va2, vb2, tlen)

    def cutUni(self, eddge, nbre):
        return _hexablock_swig.Document_cutUni(self, eddge, nbre)

    def cut(self, eddge, tlen):
        return _hexablock_swig.Document_cut(self, eddge, tlen)

    def addGroup(self, name, kind):
        return _hexablock_swig.Document_addGroup(self, name, kind)

    def isSaved(self):
        return _hexablock_swig.Document_isSaved(self)

    def appendXml(self, fstudy):
        return _hexablock_swig.Document_appendXml(self, fstudy)

    def getXml(self):
        return _hexablock_swig.Document_getXml(self)

    def getLevel(self):
        return _hexablock_swig.Document_getLevel(self)

    def findVertex(self, *args):
        return _hexablock_swig.Document_findVertex(self, *args)

    def closeQuads(self, q1, q2):
        return _hexablock_swig.Document_closeQuads(self, q1, q2)

    def addLaw(self, *args):
        return _hexablock_swig.Document_addLaw(self, *args)

    def checkAssociations(self):
        return _hexablock_swig.Document_checkAssociations(self)

    def addShape(self, forme, name):
        return _hexablock_swig.Document_addShape(self, forme, name)
    __swig_destroy__ = _hexablock_swig.delete_Document
    __del__ = lambda self: None
Document_swigregister = _hexablock_swig.Document_swigregister
Document_swigregister(Document)

class Propagation(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Propagation, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Propagation, name)
    __repr__ = _swig_repr

    def getEdges(self):
        return _hexablock_swig.Propagation_getEdges(self)

    def getLaw(self):
        return _hexablock_swig.Propagation_getLaw(self)

    def getWay(self):
        return _hexablock_swig.Propagation_getWay(self)

    def setWay(self, sens):
        return _hexablock_swig.Propagation_setWay(self, sens)

    def setLaw(self, loi):
        return _hexablock_swig.Propagation_setLaw(self, loi)

    def __init__(self, doc):
        this = _hexablock_swig.new_Propagation(doc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def saveXml(self, xml):
        return _hexablock_swig.Propagation_saveXml(self, xml)

    def addEdge(self, arete):
        return _hexablock_swig.Propagation_addEdge(self, arete)

    def majLaw(self):
        return _hexablock_swig.Propagation_majLaw(self)
    __swig_destroy__ = _hexablock_swig.delete_Propagation
    __del__ = lambda self: None
Propagation_swigregister = _hexablock_swig.Propagation_swigregister
Propagation_swigregister(Propagation)


def hex_instance():
    return _hexablock_swig.hex_instance()
hex_instance = _hexablock_swig.hex_instance
class Hex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hex, name)
    __repr__ = _swig_repr
    if _newclass:
        getInstance = staticmethod(_hexablock_swig.Hex_getInstance)
    else:
        getInstance = _hexablock_swig.Hex_getInstance

    def countDocument(self):
        return _hexablock_swig.Hex_countDocument(self)

    def getDocument(self, nro):
        return _hexablock_swig.Hex_getDocument(self, nro)

    def removeDocument(self, doc):
        return _hexablock_swig.Hex_removeDocument(self, doc)

    def addDocument(self, *args):
        return _hexablock_swig.Hex_addDocument(self, *args)

    def loadDocument(self, name):
        return _hexablock_swig.Hex_loadDocument(self, name)

    def findDocument(self, *args):
        return _hexablock_swig.Hex_findDocument(self, *args)

    def what(self):
        return _hexablock_swig.Hex_what(self)

    def sizeofMessage(self):
        return _hexablock_swig.Hex_sizeofMessage(self)

    def getMessageLine(self, nlig):
        return _hexablock_swig.Hex_getMessageLine(self, nlig)

    def __init__(self):
        this = _hexablock_swig.new_Hex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Hex
    __del__ = lambda self: None
Hex_swigregister = _hexablock_swig.Hex_swigregister
Hex_swigregister(Hex)

def Hex_getInstance():
    return _hexablock_swig.Hex_getInstance()
Hex_getInstance = _hexablock_swig.Hex_getInstance


def what():
    return _hexablock_swig.what()
what = _hexablock_swig.what
class Elements(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Elements, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Elements, name)
    __repr__ = _swig_repr

    def getHexa(self, nro):
        return _hexablock_swig.Elements_getHexa(self, nro)

    def getQuad(self, nro):
        return _hexablock_swig.Elements_getQuad(self, nro)

    def getEdge(self, nro):
        return _hexablock_swig.Elements_getEdge(self, nro)

    def getVertex(self, nro):
        return _hexablock_swig.Elements_getVertex(self, nro)

    def getHexaIJK(self, nx, ny, nz):
        return _hexablock_swig.Elements_getHexaIJK(self, nx, ny, nz)

    def getQuadIJ(self, nx, ny, nz):
        return _hexablock_swig.Elements_getQuadIJ(self, nx, ny, nz)

    def getQuadJK(self, nx, ny, nz):
        return _hexablock_swig.Elements_getQuadJK(self, nx, ny, nz)

    def getQuadIK(self, nx, ny, nz):
        return _hexablock_swig.Elements_getQuadIK(self, nx, ny, nz)

    def getEdgeI(self, nx, ny, nz):
        return _hexablock_swig.Elements_getEdgeI(self, nx, ny, nz)

    def getEdgeJ(self, nx, ny, nz):
        return _hexablock_swig.Elements_getEdgeJ(self, nx, ny, nz)

    def getEdgeK(self, nx, ny, nz):
        return _hexablock_swig.Elements_getEdgeK(self, nx, ny, nz)

    def getVertexIJK(self, nx, ny, nz):
        return _hexablock_swig.Elements_getVertexIJK(self, nx, ny, nz)

    def countHexa(self):
        return _hexablock_swig.Elements_countHexa(self)

    def countQuad(self):
        return _hexablock_swig.Elements_countQuad(self)

    def countEdge(self):
        return _hexablock_swig.Elements_countEdge(self)

    def countVertex(self):
        return _hexablock_swig.Elements_countVertex(self)

    def nearestVertex(self, other):
        return _hexablock_swig.Elements_nearestVertex(self, other)

    def findVertex(self, elt):
        return _hexablock_swig.Elements_findVertex(self, elt)

    def clearAssociation(self):
        return _hexablock_swig.Elements_clearAssociation(self)

    def saveVtk(self, nomfic):
        return _hexablock_swig.Elements_saveVtk(self, nomfic)

    def __init__(self, doc):
        this = _hexablock_swig.new_Elements(doc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Elements
    __del__ = lambda self: None
Elements_swigregister = _hexablock_swig.Elements_swigregister
Elements_swigregister(Elements)

class BiCylinder(Elements):
    __swig_setmethods__ = {}
    for _s in [Elements]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [Elements]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, doc):
        this = _hexablock_swig.new_BiCylinder(doc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHexaIJK(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getHexaIJK(self, part, nx, ny, nz)

    def getQuadIJ(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getQuadIJ(self, part, nx, ny, nz)

    def getQuadJK(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getQuadJK(self, part, nx, ny, nz)

    def getQuadIK(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getQuadIK(self, part, nx, ny, nz)

    def getEdgeI(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getEdgeI(self, part, nx, ny, nz)

    def getEdgeJ(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getEdgeJ(self, part, nx, ny, nz)

    def getEdgeK(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getEdgeK(self, part, nx, ny, nz)

    def getVertexIJK(self, part, nx, ny, nz):
        return _hexablock_swig.BiCylinder_getVertexIJK(self, part, nx, ny, nz)
    __swig_destroy__ = _hexablock_swig.delete_BiCylinder
    __del__ = lambda self: None
BiCylinder_swigregister = _hexablock_swig.BiCylinder_swigregister
BiCylinder_swigregister(BiCylinder)

class NewShape(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewShape, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewShape, name)
    __repr__ = _swig_repr

    def countVertex(self):
        return _hexablock_swig.NewShape_countVertex(self)

    def countEdge(self):
        return _hexablock_swig.NewShape_countEdge(self)

    def countFace(self):
        return _hexablock_swig.NewShape_countFace(self)

    def getVertex(self, nro):
        return _hexablock_swig.NewShape_getVertex(self, nro)

    def getEdge(self, nro):
        return _hexablock_swig.NewShape_getEdge(self, nro)

    def getFace(self, nro):
        return _hexablock_swig.NewShape_getFace(self, nro)

    def getNameVertex(self, nro):
        return _hexablock_swig.NewShape_getNameVertex(self, nro)

    def getNameEdge(self, nro):
        return _hexablock_swig.NewShape_getNameEdge(self, nro)

    def getNameFace(self, nro):
        return _hexablock_swig.NewShape_getNameFace(self, nro)

    def __init__(self, *args):
        this = _hexablock_swig.new_NewShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_NewShape
    __del__ = lambda self: None
NewShape_swigregister = _hexablock_swig.NewShape_swigregister
NewShape_swigregister(NewShape)

class Group(EltBase):
    __swig_setmethods__ = {}
    for _s in [EltBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [EltBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr

    def addElement(self, elt):
        return _hexablock_swig.Group_addElement(self, elt)

    def countElement(self):
        return _hexablock_swig.Group_countElement(self)

    def getKind(self):
        return _hexablock_swig.Group_getKind(self)

    def clearElement(self):
        return _hexablock_swig.Group_clearElement(self)

    def removeElement(self, *args):
        return _hexablock_swig.Group_removeElement(self, *args)

    def getElement(self, nro):
        return _hexablock_swig.Group_getElement(self, nro)

    def __init__(self, dad, nom, grp):
        this = _hexablock_swig.new_Group(dad, nom, grp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hexablock_swig.delete_Group
    __del__ = lambda self: None
Group_swigregister = _hexablock_swig.Group_swigregister
Group_swigregister(Group)

# This file is compatible with both classic and new-style classes.


